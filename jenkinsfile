node {
    withCredentials([string(credentialsId: 'webhook_token', variable: 'webhooktoken')]) {
        properties([
            pipelineTriggers([
                [$class          : 'GenericTrigger',
                 genericVariables: [
                     [key: 'webhookActorDisplayName', value: '$.actor.displayName'],
                 ],
                 token           : webhooktoken,
                 causeString     : 'See töö käivitati $webhookActorDisplayName poolt läbi bitbucketi webhooki kaudu',
                 printPostContent: true,
                 silentResponse  : false
                ]
            ])
        ])
    }
}

def javaDockerImage = 'maven:3.8.2-openjdk-17'
def javaDockerImageUrl = "nexus.riaint.ee:8500/library/${javaDockerImage}"

pipeline {

    parameters {
        string(
            name: 'branch',
            defaultValue: 'master',
            description: '',
            trim: true
        )
    }

    environment {
        INFRAENV = "${env.JOB_NAME}".split('-')[1].split('/')[0].toLowerCase()
        TLD = "${env.INFRAENV}.riaint.ee"
        DOCKER_IMAGE_REPOSITORY = 'harbor.riaint.ee/cdoc2'
        DOCKER_CREDENTIALS_ID = 'cdoc2-jenkins-harbor'
        DOCKER_IMAGE_NAME = 'cdoc20-server'
        DOCKER_IMAGE_TAG = '0.0.7-SNAPSHOT'
        DB_LIQUIBASE_DOCKER_IMG_NAME = 'cdoc20-server-liquibase'
    }

    agent any

    stages {
        stage('Clone sources') {
            steps {
                git branch: "${branch}", credentialsId: 'bitbucket-ssh', url: 'ssh://git@stash.ria.ee:7799/cdoc2/cdoc20_java.git'
            }
        }

        stage('Compile') {
            steps {
                sh('docker run --pull always --rm ' +
                    ' --volume "$PWD:/usr/src/project"' +
                    ' --workdir /usr/src/project' +
                    " ${javaDockerImageUrl} " +
                    ' mvn --batch-mode -s ria-settings.xml -Duser.home=/usr/src/project' +
                    ' -DskipTests=true ' + // skip test for now because they are slow (more than 30 min) on jenkins -- needs better entropy etc (e.g haveged) ?
                    ' clean verify package '
                )
            }
        }

        stage('Build and Push Key Server Docker Image') {
            steps {
                    // Running-as-non-root inside Docker currently not done, because using Docker inside Docker requires
                    // root inside Docker or setting up more detailed permissions for /var/run/docker.sock

                   sh('docker run --pull always --rm ' +
                    ' --volume /var/run/docker.sock:/var/run/docker.sock ' +
                    ' --volume "$PWD:/usr/src/project"' +
                    ' --workdir /usr/src/project' +
                    ' --env MAVEN_CONFIG=/tmp/.m2' +
                    " ${javaDockerImageUrl} " +
                    // run install so that cdoc20 subprojects' artifacts are available to cdoc20-server build
                    ' mvn --batch-mode -s ria-settings.xml -Duser.home=/tmp clean install -DskipTests=true && ' + 
                    ' mvn --batch-mode -s ria-settings.xml ' +
                    ' -Dspring-boot.build-image.runImage=nexus.riaint.ee:8500/paketobuildpacks/builder:0.1.185-base' +
                    ' -Dspring-boot.build-image.runImage=nexus.riaint.ee:8500/paketobuildpacks/run:1.1.32-base-cnb' +
                    ' -Dmaven.test.skip=true -Duser.home=/tmp -Dmaven.repo.local=/tmp/.m2/repository -e -X ' +
                    ' -pl cdoc20-server/ spring-boot:build-image'
                )
                sh("docker tag ${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG} ${env.DOCKER_IMAGE_REPOSITORY}/${env.DOCKER_IMAGE_NAME}:latest")
                script {
                    dockerImage = docker.image("${env.DOCKER_IMAGE_REPOSITORY}/${env.DOCKER_IMAGE_NAME}:latest")
                    docker.withRegistry('https://harbor.riaint.ee/', env.DOCKER_CREDENTIALS_ID) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Build and Push Key Server Liquibase Docker Image') {
            steps {
                dir('cdoc20-server/src/main/resources/db') {
                   sh("docker build -t ${env.DB_LIQUIBASE_DOCKER_IMG_NAME} .")
                   sh("docker tag ${env.DB_LIQUIBASE_DOCKER_IMG_NAME}:latest ${env.DOCKER_IMAGE_REPOSITORY}/${env.DB_LIQUIBASE_DOCKER_IMG_NAME}:latest")
                   script {
                        dockerImage = docker.image("${env.DOCKER_IMAGE_REPOSITORY}/${env.DB_LIQUIBASE_DOCKER_IMG_NAME}:latest")
                        docker.withRegistry('https://harbor.riaint.ee/', env.DOCKER_CREDENTIALS_ID) {
                            dockerImage.push()
                        }
                   }
                }
            }
        }

        stage('Update Key Server instance') {
            steps {
                script {
                    callWithSshCredentials("cdoc2-keyserver-01", { remote ->
                        sshCommand(remote: remote, command: "sh /home/riajenk/update-server.sh")
                    })
                }
            }
        }

        /* needs debugging -> currently results in access denied
        stage('Deploy java artifacts to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-cdoc2-maven-local', usernameVariable: 'NEXUS_user', passwordVariable: 'NEXUS_pass')]) {
                    sh('docker run --pull always --rm --user "$(id -u):$(id -g)"' +
                       ' --volume "$HOME/.m2:/var/maven/.m2"' +
                       ' --volume "$PWD:/usr/src/project"' +
                       ' --workdir /usr/src/project' +
                       ' --env MAVEN_CONFIG=/var/maven/.m2 ' +
                       " ${javaDockerImageUrl} " +
                       ' mvn --batch-mode -s ria-settings.xml -Duser.home=/var/maven/' +
                       ' -DskipTests deploy -DaltDeploymentRepository=credentials::default::https://nexus.riaint.ee/repository/cdoc2-maven-local/'
                    )
                }
            }
		}
        */
    }
}

def callWithSshCredentials(String node, Closure action) {
    withCredentials([sshUserPrivateKey(credentialsId: 'riajenk-ssh', usernameVariable: 'username', keyFileVariable: 'keyfile')]) {
        def remote = [:]
        remote.name = node
        remote.host = "${node}.${env.TLD}"
        remote.user = username
        remote.identityFile = keyfile
        remote.allowAnyHosts = true
        action.call(remote)
    }
}


