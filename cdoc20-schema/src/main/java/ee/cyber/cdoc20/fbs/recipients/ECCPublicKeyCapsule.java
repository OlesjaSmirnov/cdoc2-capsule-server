// automatically generated by the FlatBuffers compiler, do not modify

package ee.cyber.cdoc20.fbs.recipients;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ECCPublicKeyCapsule extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static ECCPublicKeyCapsule getRootAsECCPublicKeyCapsule(ByteBuffer _bb) { return getRootAsECCPublicKeyCapsule(_bb, new ECCPublicKeyCapsule()); }
  public static ECCPublicKeyCapsule getRootAsECCPublicKeyCapsule(ByteBuffer _bb, ECCPublicKeyCapsule obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ECCPublicKeyCapsule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte curve() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int recipientPublicKey(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int recipientPublicKeyLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector recipientPublicKeyVector() { return recipientPublicKeyVector(new ByteVector()); }
  public ByteVector recipientPublicKeyVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer recipientPublicKeyAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer recipientPublicKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int senderPublicKey(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int senderPublicKeyLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector senderPublicKeyVector() { return senderPublicKeyVector(new ByteVector()); }
  public ByteVector senderPublicKeyVector(ByteVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer senderPublicKeyAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer senderPublicKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createECCPublicKeyCapsule(FlatBufferBuilder builder,
      byte curve,
      int recipientPublicKeyOffset,
      int senderPublicKeyOffset) {
    builder.startTable(3);
    ECCPublicKeyCapsule.addSenderPublicKey(builder, senderPublicKeyOffset);
    ECCPublicKeyCapsule.addRecipientPublicKey(builder, recipientPublicKeyOffset);
    ECCPublicKeyCapsule.addCurve(builder, curve);
    return ECCPublicKeyCapsule.endECCPublicKeyCapsule(builder);
  }

  public static void startECCPublicKeyCapsule(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addCurve(FlatBufferBuilder builder, byte curve) { builder.addByte(0, curve, 0); }
  public static void addRecipientPublicKey(FlatBufferBuilder builder, int recipientPublicKeyOffset) { builder.addOffset(1, recipientPublicKeyOffset, 0); }
  public static int createRecipientPublicKeyVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createRecipientPublicKeyVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startRecipientPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSenderPublicKey(FlatBufferBuilder builder, int senderPublicKeyOffset) { builder.addOffset(2, senderPublicKeyOffset, 0); }
  public static int createSenderPublicKeyVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createSenderPublicKeyVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startSenderPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endECCPublicKeyCapsule(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // recipient_public_key
    builder.required(o, 8);  // sender_public_key
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ECCPublicKeyCapsule get(int j) { return get(new ECCPublicKeyCapsule(), j); }
    public ECCPublicKeyCapsule get(ECCPublicKeyCapsule obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

