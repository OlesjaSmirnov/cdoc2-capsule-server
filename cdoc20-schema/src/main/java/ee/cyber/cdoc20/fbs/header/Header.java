// automatically generated by the FlatBuffers compiler, do not modify

package ee.cyber.cdoc20.fbs.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Header extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static Header getRootAsHeader(ByteBuffer _bb) { return getRootAsHeader(_bb, new Header()); }
  public static Header getRootAsHeader(ByteBuffer _bb, Header obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RecipientRecord recipients(int j) { return recipients(new RecipientRecord(), j); }
  public RecipientRecord recipients(RecipientRecord obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int recipientsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public RecipientRecord.Vector recipientsVector() { return recipientsVector(new RecipientRecord.Vector()); }
  public RecipientRecord.Vector recipientsVector(RecipientRecord.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public byte payloadEncryptionMethod() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createHeader(FlatBufferBuilder builder,
      int recipientsOffset,
      byte payloadEncryptionMethod) {
    builder.startTable(2);
    Header.addRecipients(builder, recipientsOffset);
    Header.addPayloadEncryptionMethod(builder, payloadEncryptionMethod);
    return Header.endHeader(builder);
  }

  public static void startHeader(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addRecipients(FlatBufferBuilder builder, int recipientsOffset) { builder.addOffset(0, recipientsOffset, 0); }
  public static int createRecipientsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRecipientsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPayloadEncryptionMethod(FlatBufferBuilder builder, byte payloadEncryptionMethod) { builder.addByte(1, payloadEncryptionMethod, 0); }
  public static int endHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Header get(int j) { return get(new Header(), j); }
    public Header get(Header obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

